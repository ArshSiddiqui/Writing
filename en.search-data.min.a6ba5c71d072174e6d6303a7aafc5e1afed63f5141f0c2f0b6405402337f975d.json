[{"id":0,"href":"/writing/oldwriting/realprogrammersusegmail/","title":"Real Programmers Use Gmail","section":"Old Writing","content":"\rReal Programmers Use Gmail\r#\rI was recently having a conversation with a good friend of mine from the university. We were both students of the computer, or Computer Science majors as most people knew us by. During this conversation, I happened upon a question then that did intrigue me greatly: “What do you use to code?”.\nSee, this programmer (along with many others at my school) happen to use the IDE (the meaning of which doesn’t matter, but I DuckDuckGoed it, and it means Integrated Development Environment if you really care) of Eclipse.\nNow, I understand that the use of Eclipse is quite common among many programmers, and so too are many other IDEs, like Microsoft Visual Studio and WebStorm. However, I simply cannot allow the glorious realm of Computer Science to continue to stray down such a dark and gloomy and sad and disgusting and distressing and disappointing and path.\nI believe that IDEs are the mark of an inferior programmer, and only true programmers would use a system like Gmail to complete their code. There are many other ways of coding that I do find acceptable, like YouTube comments to private videos published by yourself or even by writing the code directly onto unlined and ungridded Tomoe River Paper using a Mont Blanc fountain pen containing the ink of various goats sacrificed to Steve Zuckerberg, but Gmail is a far more accessible and more efficient tool.\nTo explain my use of Gmail, I find it helpful to go through how I code, starting from the beginning.\nI begin with a cup of coffee, black preferably (because black coffee, as it does provide a taste much like dirt, allows me to regain my sense of feeling as a programmer), before sitting down in my gamer chair preparing myself to code. I use a gamer chair, because it is the only chair that can handle the strong and strenuous movements of anger and frustration I make when coding. To match my chair I have a Logitech G PRO Mechanical Gaming Keyboard, Ultra Portable Tenkeyless Design, Detachable Micro USB Cable, 16.8 Million Color LIGHTSYNC RGB Backlit Keys (4.7 out of 5 stars, 1157 ratings), only the necessities.\nI then turn on my computer and enter “gmail.com” into the DuckDuckGo search bar. After providing my c\nredentials, I click on the compose button, but not after bragging to you (the reader), about my 17,345 unread emails (much of which is code previously created on Gmail). In the email construction box, I make sure that I put my own email address (GmailProgrammer4EVA2234@gmail.com) in the “To” section, to ensure that it goes to me, not to anybody else. In the subject line, I leave it blank, because I don’t have time to write out a subject line, I’m a busy programmer after all! After this, I generally find myself coffee-ed out, and so I take some of my caffeine pills (prescribed to me by me, not my doctor, because I don’t have the time to see doctors, I’m a busy programmer after all!) and pop about 5 pills into a bottle of water, and another 5 directly into my mouth, so as to chew them.\nThen I can finally begin to code, all within the text field, but sometimes, if I really feel like taking my programming prowess to the next level, I convert all of my paragraphs of code into one line and stick it in the subject field. This is a major feat within the world of computing, and so I make sure to additionally send an email with this subject line to my boss, with the additional message “Coming for your job next!!!1!11!1!”. When doing this, do make sure to consume as much caffeine as possible, as you don’t want to get tired whilst doing all that coding!\nAfter my work is done, I close my computer, before heading back to my kitchen to make another (well deserved) cup of black coffee.\nWhile it may seem like a lot of work, this is the true method of programming, and I hope that some of you lowly IDE programmers choose to enlighten yourselves and join me on this path.\n"},{"id":1,"href":"/writing/technical/stockanalysis/stockanalysis/","title":"Stock Analysis","section":"Technical","content":"\rStock Analysis\r#\rGiven the ubiquity of the financial market in our day to day lives, and with my personal interest in stocks I figured that now would be as good of a time as any to learn how to analyze stocks with code.\nGiven its current ubiquity in the field and with its abundance of libraries that would make learning more about this field, I elected to proceed with Python. One of the main reasons for this choice, outside of what I had just outlined, is that using the Pandas library allows us to quickly and easily gain stock information for a given stock for a period of time.\nfrom pandas_datareader import data\rimport datetime\rtoday = datetime.date.today()\rstart_date = str(today - datetime.timedelta(1000))\rend_date = str(today)\rpanel_data = data.DataReader('AAPL', 'yahoo', start_date, end_date)\rpanel_data\rDate High Low Open Close Volume Adj Close 2019-08-28 51.430000 50.830002 51.025002 51.382500 63755200.0 50.340683 2019-08-29 52.330002 51.665001 52.125000 52.252499 83962000.0 51.193043 2019-08-30 52.612499 51.799999 52.540001 52.185001 84573600.0 51.126915 2019-09-03 51.744999 51.055000 51.607498 51.424999 80092000.0 50.382324 2019-09-04 52.369999 51.830002 52.097500 52.297501 76752400.0 51.237133 \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; 2022-05-17 149.770004 146.679993 148.860001 149.240005 78336300.0 149.240005 2022-05-18 147.360001 139.899994 146.850006 140.820007 109742900.0 140.820007 2022-05-19 141.660004 136.600006 139.880005 137.350006 136095600.0 137.350006 2022-05-20 140.699997 132.610001 139.089996 137.589996 137194600.0 137.589996 2022-05-23 143.259995 137.649994 137.789993 143.110001 116301300.0 143.110001 With this data gained, we can quickly single out the Close column such that we can start visualizing our stock data. Sometimes when looking at stock data, or when visualizing it, we may want to smooth out the data so that we can avoid shifted perceptions due to temporary changes in stock valuation. This may offer us a more comprehensive look at our data, that is not skewed by any minor blip.\nWe can change the duration of the rolling average, based upon how much smoothing we may want. For example, we could have a shorter smoothing of just 20 days, or longer smoothing of 100 days.\nBefore I did that, though, I first had to reindex my data. Because financial data is collected on weekdays, I had to account for that fact by adding in all of the non-included days in our data between the start and end dates we provided. We can fill these empty spots in with na and then we can reindex those to copy the previously entered piece of data into that box.\nimport pandas as pd\rimport matplotlib.pyplot as plt\rclose = panel_data['Close']\rall_weekdays = pd.date_range(start=start_date, end=end_date, freq='B')\rclose = close.reindex(all_weekdays)\rclose = close.fillna(method='ffill')\rshort_rolling_msft = close.rolling(window=20).mean()\rlong_rolling_msft = close.rolling(window=100).mean()\rfig, ax = plt.subplots(figsize=(16,9))\rax.plot(close.index, close, label='AAPL')\rax.plot(short_rolling_msft.index, short_rolling_msft, label='20 days rolling')\rax.plot(long_rolling_msft.index, long_rolling_msft, label='100 days rolling')\rax.set_xlabel('Date')\rax.set_ylabel('Adjusted closing price ($)')\rax.legend()\rWhen developing a stock strategy, or trading strategy, we will want to analyze the change in the returns of our stock over time. One way to do this would be to look at relative returns. A relative return is the amount of return our stock will get after some timeline relative to some benchmark return. The formula for relative returns looks as follows.\n\\[\rr_{relative}(t) = \\frac{p(t) - p(t - 1)}{p(t - 1)}\r\\]\rAnother way to do this would be through logarithmic returns, the formula which is as follows.\n\\[\rr(t) = log(\\frac{p(t)}{p(t - 1)})\r\\]\rThere are many reasons why we may wish to use a log return, rather than relative returns, some of which would be that they capture the compounding effect. When we consider that financial investments such as these are compounded over many points in time, we may find this compounding important to capture in our data, which make log returns more appealing in their use.\nimport numpy as np\rlog_returns = np.log(close).diff()\rfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(16, 12))\rax1.plot(log_returns.index, log_returns.cumsum(), label='AAPL')\rax1.set_ylabel('Cumulative log returns')\rax1.set_xlabel('Date')\rax1.legend(loc='upper left')\rax2.plot(log_returns.index, 100*(np.exp(log_returns.cumsum()) - 1), label='AAPL')\rax2.set_ylabel('Total relative returns (%)')\rax2.set_xlabel('Date')\rax2.legend(loc='upper left')\rplt.show()\rWhile analyzing our data visually is indeed very useful, it is also helpful to analyze our data quantitatively. Here, we can also use some Python to calculate the returns between our start and end date and we can also use this to determine an average return across each year (or month if we wanted to do that as well).\ndays = 1000\ryears = days / 365\rfinal_returns = 100*(np.exp(log_returns.cumsum()) - 1)[-1]\rprint('Return from start date to end date is: ' + '{:.2f}'.format(final_returns) + '%')\rfinal_returns_per_year = final_returns / years\rprint('Average yearly return: ' + '{:.2f}'.format(final_returns_per_year) + '%')\rReturn from start date to end date is: 178.52% Average yearly return: 65.16% When we previously looked at our rolling averages of stock returns, we were using a method known as the \u0026ldquo;simple moving average\u0026rdquo; (SMA). This method is evidently fairly easy to create, and shows us the general trend of our stock movement. Another method is known as the \u0026ldquo;exponential moving average\u0026rdquo; (EMA). This method of moving average places more importance/weight on more recent data points, so it accounts more strongly for recent changes in price.\nWith the EMA, we can also do it across a time period, perhaps 20 or even 100 days. Below I have graphed the regular stock price and both the EMA and SMA across 20 and 100 days, so as to easily see their differences.\nema_short = close.ewm(span = 20, adjust=False).mean()\rema_long = close.ewm(span = 100, adjust=False).mean()\rfig, ax = plt.subplots(figsize=(16,9))\rax.plot(close.index, close, label='AAPL')\rax.plot(short_rolling_msft.index, short_rolling_msft, label='20 days SMA')\rax.plot(long_rolling_msft.index, long_rolling_msft, label='100 days SMA')\rax.plot(ema_short.index, ema_short, label=\u0026quot;20 days EMA\u0026quot;)\rax.plot(ema_long.index, ema_long, label=\u0026quot;100 days EMA\u0026quot;)\rax.set_xlabel('Date')\rax.set_ylabel('Adjusted closing price ($)')\rax.legend()\rBefore making any investment it is critical to know the volatility of a stock, as it can give us insight into how risky the stock may be as an investment. Volatility measures how dispersed, or spread out, the returns for our stock is. Thus, the greater the volatility is, the riskier of an investment it would be. It can be calculated as the standard deviation between returns of the stock. Below you can see the measured stock volatility based upon the log returns of the stock price and its frequency.\nema_short = close.ewm(span = 20, adjust=False).mean()\rema_long = close.ewm(span = 100, adjust=False).mean()\rfig, ax = plt.subplots(figsize=(16,9))\rax.plot(close.index, close, label='AAPL')\rax.plot(short_rolling_msft.index, short_rolling_msft, label='20 days SMA')\rax.plot(long_rolling_msft.index, long_rolling_msft, label='100 days SMA')\rax.plot(ema_short.index, ema_short, label=\u0026quot;20 days EMA\u0026quot;)\rax.plot(ema_long.index, ema_long, label=\u0026quot;100 days EMA\u0026quot;)\rax.set_xlabel('Date')\rax.set_ylabel('Adjusted closing price ($)')\rax.legend()\rThere is a lot more analysis that can and should be done to better understand investments, in this case stock investments, so I intend to come back to this topic in the future to learn about more methods for financial analysis.\n"},{"id":2,"href":"/writing/docs/aboutme/","title":"About Me","section":"Docs","content":"Hello, my name is Arsh Siddiqui.\nThis website contains a portfolio of my writing.\nHopefully you\u0026rsquo;ll enjoy it\u0026hellip;\nThanks for coming along!\n"},{"id":3,"href":"/writing/oldwriting/","title":"Old Writing","section":"Arsh Siddiqui","content":"\rOld Writing\r#\rWork that is absolutely of middling quality.\nReal Programmers Use Gmail\n"},{"id":4,"href":"/writing/technical/","title":"Technical","section":"Arsh Siddiqui","content":"\rTechnical Writing and Work\r#\rWork and writing of a more technical stance and nature. Geared towards my studies and interests therein.\nStock Analysis\n"}]